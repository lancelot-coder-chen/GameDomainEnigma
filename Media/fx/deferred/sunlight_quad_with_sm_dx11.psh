//semantic GBufferDiffuseTexture GBufferDiffuseMap
//semantic GBufferNormalTexture GBufferNormalMap
//semantic GBufferSpecularTexture GBufferSpecularMap
//semantic GBufferDepthTexture GBufferDepthMap
//semantic SunColor SunLightColor
//semantic SunDir SunLightDirection
//semantic View View
//semantic ViewInv ViewInv
//semantic TangentFov TangentFov
//semantic ShadowTexture ShadowMap
//semantic LightViewProj LightViewProj
//semantic ShadowMapSliceDimension ShadowMapSliceDimension
Texture2D GBufferDiffuseTexture : GBufferDiffuseMap;
Texture2D GBufferNormalTexture : GBufferNormalMap;
Texture2D GBufferSpecularTexture : GBufferSpecularMap;
Texture2D GBufferDepthTexture : GBufferDepthMap;
Texture2D ShadowTexture : ShadowMap;
float4 Ambient : AmbientLight;
float4 SunColor : SunLightColor;
float4 SunDir : SunLightDirection;
matrix View : View;
matrix ViewInv : ViewInv;
matrix LightViewProj : LightViewProj;
float4 TangentFov : TangentFov;
float4 ShadowMapSliceDimension : ShadowMapSliceDimension;
#define ShadowMapSliceWidth 	ShadowMapSliceDimension.x
#define ShadowMapSliceHeight 	ShadowMapSliceDimension.y
#define ShadowDepthBias			ShadowMapSliceDimension.z
#define ShadowMapDensity		ShadowMapSliceDimension.w
SamplerState DiffuseMapSampler
{
	Filter = MIN_MAG_LINEAR_MIP_NONE;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState NormalMapSampler
{
	Filter = MIN_MAG_LINEAR_MIP_NONE;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState SpecularMapSampler
{
	Filter = MIN_MAG_LINEAR_MIP_NONE;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState DepthMapSampler
{
	Filter = MIN_MAG_LINEAR_MIP_NONE;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState ShadowMapSampler
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
struct PS_INPUT
{
	float4 Pos : SV_POSITION;
	float2 Coord : TEXCOORD0;
    float2 ProjPos : TEXCOORD1;
};
struct PS_OUTPUT
{
	float4 Color : SV_TARGET0;
};

PS_OUTPUT ps_main(PS_INPUT input)
{
 	PS_OUTPUT output = (PS_OUTPUT)0;

	float4 diffuse = GBufferDiffuseTexture.Sample( DiffuseMapSampler, input.Coord );
	float4 spec_texcolor = GBufferSpecularTexture.Sample( SpecularMapSampler, input.Coord );
	float3 nor = GBufferNormalTexture.Sample( NormalMapSampler, input.Coord );
	float pos_z = GBufferDepthTexture.Sample( DepthMapSampler, input.Coord );

	float4 view_space_pos = float4( input.ProjPos.x * TangentFov.x * pos_z, input.ProjPos.y * TangentFov.y * pos_z,
                                pos_z, 1.0 );
	float4 world_pos = mul(view_space_pos, ViewInv);
	float spec_power = spec_texcolor.a;
	spec_texcolor.a = 0;
	float3 sun_dir = mul ( SunDir.xyz, View );
	sun_dir = normalize( sun_dir );
	float3 H = normalize ( sun_dir + float3(0, 0, -1) ); // in view space, view dir is -z
	float cos_th = saturate ( dot ( nor, H ) );
	float specular_coef = (cos_th <= 0.0f) ? 0.0f : pow ( cos_th, spec_power );
	
    float4 color = ( diffuse * saturate ( dot ( sun_dir, nor ) ) 
                    + ( spec_texcolor * specular_coef ) ) * SunColor;

	float4 lightProj = mul ( world_pos, LightViewProj );
    if ( ( lightProj.x < -1.0f ) || ( lightProj.y < -1.0f ) || ( lightProj.x > 1.0f ) || (lightProj.y > 1.0f ) )
	{
		output.Color = color;
		return output;
	}
    float2 ShadowTexC = 0.5 * lightProj.xy / lightProj.w + float2( 0.5, 0.5 );
    ShadowTexC.y = 1.0f - ShadowTexC.y;
    // transform to texel space
    float2 texelpos = float2(ShadowMapSliceWidth, ShadowMapSliceHeight) * ShadowTexC;
    // Determine the lerp amounts           
    float2 lerps = frac( texelpos );

    //read in bilerp stamp, doing the shadow checks
	float shadow_depth = (ShadowTexture.Sample( ShadowMapSampler, ShadowTexC)).x;
    float sourceval;
	if (shadow_depth == 1.0f)
	{
		sourceval = 1.0f;
	}
	else
	{
		sourceval = (shadow_depth + ShadowDepthBias) < (lightProj.z / lightProj.w) ? ShadowMapDensity : 1.0f;
	}
    output.Color = color * sourceval;
	return output;
};
