//semantic DiffuseTexture DiffuseMap
//semantic Ambient AmbientLight
//semantic SunColor SunLightColor
//semantic SunDir SunLightDirection
Texture2D DiffuseTexture : DiffuseMap;
float4 Ambient : AmbientLight;
float4 SunColor : SunLightColor;
float4 SunDir : SunLightDirection;
SamplerState samLinear
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
struct PS_INPUT
{
	float4 Pos : SV_POSITION;
	float3 Nor : TEXCOORD0;
	float2 Coord : TEXCOORD1;
	float4 WorldPos : TEXCOORD2;
};
struct PS_OUTPUT
{
	float4 Color : COLOR0;
};

float4 CommonDiffuseLighting( in float4 world_pos, in float3 world_nor, in float light_amount = 1.0 )
{
	float4 diffuse = Ambient;
	diffuse += ( ( SunColor * saturate ( dot ( world_nor, SunDir ) ) ) * light_amount * ( 1 - Ambient ) );
	return diffuse;
}

PS_OUTPUT ps_main(PS_INPUT input)
{
 	PS_OUTPUT output = (PS_OUTPUT)0;
	float4 outputColor = DiffuseTexture.Sample(samLinear, input.Coord);
	float4 diffuse = CommonDiffuseLighting(input.WorldPos, input.Nor);
	output.Color = outputColor * diffuse;
	//outputColor.a = 1;
	//clip( outputColor.a - 0.01f );

	return output;
};
