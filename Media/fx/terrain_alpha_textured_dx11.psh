//semantic TextureLayer0 TextureLayer0
//semantic TextureLayer1 TextureLayer1
//semantic TextureLayer2 TextureLayer2
//semantic TextureLayer3 TextureLayer3
//semantic AlphaLayer AlphaLayer
//semantic Ambient AmbientLight
//semantic SunColor SunLightColor
//semantic SunDir SunLightDirection
Texture2D TextureLayer0 : TextureLayer0;
Texture2D TextureLayer1 : TextureLayer1;
Texture2D TextureLayer2 : TextureLayer2;
Texture2D TextureLayer3 : TextureLayer3;
Texture2D AlphaLayer : AlphaLayer;
float4 Ambient : AmbientLight;
float4 SunColor : SunLightColor;
float4 SunDir : SunLightDirection;
SamplerState samplerLayer0
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState samplerLayer1
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState samplerLayer2
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState samplerLayer3
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};
SamplerState samplerAlpha
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};
struct PS_INPUT
{
	float4 Pos : SV_POSITION;
	float3 Nor : TEXCOORD0;
	float2 Coord : TEXCOORD1;
	float2 AlphaCoord : TEXCOORD2;
    float4 WorldPos : TEXCOORD3;
};

float4 CommonDiffuseLighting( in float4 world_pos, in float3 world_nor, in float light_amount = 1.0 )
{
	float4 diffuse = Ambient;
	diffuse += ( ( SunColor * saturate ( dot ( world_nor, SunDir ) ) ) * light_amount * ( 1 - Ambient ) );
	return diffuse;
}
float3 CombineTextureColor( float2 UV0, float2 AlphaUV )
{
	float3 texColor0 = TextureLayer0.Sample(samplerLayer0, UV0 );
	float3 texColor1 = TextureLayer1.Sample(samplerLayer1, UV0 );
	float3 texColor2 = TextureLayer2.Sample(samplerLayer2, UV0 );
	float3 texColor3 = TextureLayer3.Sample(samplerLayer3, UV0 );
	float3 texAlpha  = AlphaLayer.Sample(samplerAlpha, AlphaUV );
	float3 texCombineColor = lerp ( texColor0, texColor1, texAlpha.x );
	texCombineColor = lerp ( texCombineColor, texColor2, texAlpha.y );
	texCombineColor = lerp ( texCombineColor, texColor3, texAlpha.z );
	return texCombineColor;
}

float4 ps_main(PS_INPUT input) : COLOR0
{
	float3 texCombineColor = CombineTextureColor( input.Coord, input.AlphaCoord );
    float4 outputColor = CommonDiffuseLighting ( input.WorldPos, input.Nor ) * float4(texCombineColor.rgb, 1.0);
    outputColor.a = 1;

	return outputColor;
};
